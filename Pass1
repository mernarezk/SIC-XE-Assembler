import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.StringTokenizer;

public class Pass1 {

	private static BufferedReader in;
	static Hashtable<String, ArrayList<Integer>> instructions = new Hashtable<String, ArrayList<Integer>>();
	static LinkedHashMap<String, Integer> SymbolTable = new LinkedHashMap<String, Integer>();

	public static void main(String args[]) throws IOException {

		in = new BufferedReader(new InputStreamReader(new FileInputStream(
				"instructions.txt"), "UTF-8"));

		String line;

		while ((line = in.readLine()) != null) {
			String words[] = new String[2];
			StringTokenizer tokens = new StringTokenizer(line);
			words[0] = tokens.nextElement().toString();
			words[1] = tokens.nextToken().toString();
			ArrayList<Integer> formats = new ArrayList<Integer>();
			tokens = new StringTokenizer(words[1], ",");
			while (tokens.hasMoreElements()) {
				formats.add(Integer.parseInt(tokens.nextElement().toString()));
			}
			instructions.put(words[0], formats);
		}

		int type, LineNo = 1, intPC = 0;
		boolean DuplicateLabel = false, WrongInstruction = false;
		String empty = " ";
		ArrayList<String> words;

		PrintWriter SymbolWriter = new PrintWriter("LISFILE.txt");
		PrintWriter writer = new PrintWriter(new FileOutputStream(new File(
				"LISFILE.txt"), true));
		try {
			in = new BufferedReader(new InputStreamReader(new FileInputStream(
					"srcfile.txt"), "UTF-8"));
		} catch (IOException e) {
			System.out.println("No File Found");
			writer.println("          No File Found");
			writer.close();
			return;
		}
		writer.printf("     p r o g r a m     l i s t i n g\n\n");
		writer.printf("Line no.    Address    Label    Mnemonic    Operands    Comments\n\n");
		while ((line = in.readLine()) != null) {
			words = new ArrayList<String>();
			StringTokenizer tokens = new StringTokenizer(line);
			while (tokens.hasMoreElements()) {
				words.add(tokens.nextElement().toString());
			}
			type = CheckType(line, words);
			switch (type) {
			case 1:
				if (words.size() == 3) {
					intPC = Integer.parseInt(words.get(2), 16);
					writer.printf("%-8d    %06X     %-9s%-8s    %s\n", LineNo,
							intPC, words.get(0), words.get(1), words.get(2));
					if (checkDuplicate(words.get(0))) {
						writer.println("*****ERROR: SYMBOL " + words.get(0)
								+ " ALREADY DEFINED");
						DuplicateLabel = true;
					} else
						SymbolTable.put(words.get(0), intPC);
					LineNo++;
				} else if (words.size() == 2) {
					if (words.get(1).contains("START"))
						intPC = Integer.parseInt(words.get(1), 16);
					writer.printf("%-8d    %06X     %-9s%-8s    %s\n", LineNo,
							intPC, empty, words.get(0), words.get(1));
					LineNo++;
				}
				break;
			case 2:
				if (words.get(1).contentEquals("BYTE")) {
					writer.printf("%-8d    %06X     %-9s%-8s    %-12s\n",
							LineNo, intPC, words.get(0), words.get(1),
							words.get(2));
					if (checkDuplicate(words.get(0))) {
						writer.println("*****ERROR: SYMBOL " + words.get(0)
								+ " ALREADY DEFINED");
						DuplicateLabel = true;
					} else
						SymbolTable.put(words.get(0), intPC);
					LineNo++;

					if (words.get(2).charAt(0) == 'C')
						intPC += words.get(2).length() - 3;
					else if (words.get(2).charAt(0) == 'X')
						intPC += (words.get(2).length() - 3) / 2;
				} else if (words.get(1).contains("WORD")) {
					writer.printf("%-8d    %06X     %-9s%-8s    %-12s\n",
							LineNo, intPC, words.get(0), words.get(1),
							words.get(2));
					if (checkDuplicate(words.get(0))) {
						writer.println("*****ERROR: SYMBOL " + words.get(0)
								+ " ALREADY DEFINED");
						DuplicateLabel = true;
					} else
						SymbolTable.put(words.get(0), intPC);
					LineNo++;
					intPC += 3;
				} else if (words.get(1).contains("RESB")) {
					writer.printf("%-8d    %06X     %-9s%-8s    %-12s\n",
							LineNo, intPC, words.get(0), words.get(1),
							words.get(2));
					if (checkDuplicate(words.get(0))) {
						writer.println("*****ERROR: SYMBOL " + words.get(0)
								+ " ALREADY DEFINED");
						DuplicateLabel = true;
					} else
						SymbolTable.put(words.get(0), intPC);
					LineNo++;
					intPC += Integer.parseInt(words.get(2));
				} else if (words.get(1).contains("RESW")) {
					writer.printf("%-8d    %06X     %-9s%-8s    %-12s\n",
							LineNo, intPC, words.get(0), words.get(1),
							words.get(2));
					if (checkDuplicate(words.get(0))) {
						writer.println("*****ERROR: SYMBOL " + words.get(0)
								+ " ALREADY DEFINED");
						DuplicateLabel = true;
					} else
						SymbolTable.put(words.get(0), intPC);
					LineNo++;
					intPC += Integer.parseInt(words.get(2)) * 3;
				}

				break;
			case 3:
				writer.printf("%-8d    %06X     %s\n", LineNo, intPC, line);
				LineNo++;
				break;
			case 4:
				if (words.size() == 1) {
					if (words.get(0).contains("RSUB"))
						writer.printf("%-8d    %06X     %-9s%-8s\n", LineNo,
								intPC, empty, words.get(0));
					LineNo++;
					if (isExtended(words.get(0)) || isExtended(words.get(1)))
						intPC += instructions.get(words.get(0)).get(1);
					else
						intPC += instructions.get(words.get(0)).get(0);
				}
				if (words.size() == 2) {
					writer.printf("%-8d    %06X     %-9s%-8s    %-12s\n",
							LineNo, intPC, empty, words.get(0), words.get(1));
					if (checkOpcode(words.get(0)))
						if (!(checkOperands(words.get(1))))
							writer.printf("      ****Invalid number of operands");
					LineNo++;
					if (isExtended(words.get(0)) || isExtended(words.get(1)))
						intPC += instructions.get(words.get(0)).get(1);
					else
						intPC += instructions.get(words.get(0)).get(0);

				}
				if (words.size() == 3) {
					writer.printf("%-8d    %06X     %-9s%-8s    %-12s\n",
							LineNo, intPC, words.get(0), words.get(1),
							words.get(2));
					if (checkDuplicate(words.get(0))) {
						writer.println("*****ERROR: SYMBOL " + words.get(0)
								+ " ALREADY DEFINED");
						DuplicateLabel = true;
					} else {
						if (checkOpcode(words.get(1)))
							if (!(checkOperands(words.get(2))))
								writer.printf("      ****Invalid number of operands");
						SymbolTable.put(words.get(0), intPC);
						LineNo++;
						if (isExtended(words.get(1))
								|| isExtended(words.get(2)))
							intPC += instructions.get(words.get(1)).get(1);
						else
							intPC += instructions.get(words.get(1)).get(0);
					}
				}
				break;
			case 0:
				writer.println(" ****** unrecognized operation code");
				if (words.size() == 3)
					writer.printf("%-8d    %06X     %-9s%-8s    %-12s\n",
							LineNo, intPC, words.get(0), words.get(1),
							words.get(2));
				else if (words.size() == 2)
					writer.printf("%-8d    %06X     %-9s%-8s    %-12s\n",
							LineNo, intPC, empty, words.get(0), words.get(1));
				LineNo++;
				WrongInstruction = true;
				break;

			}
		}
		if ((!DuplicateLabel) && (!WrongInstruction)) {
			SymbolWriter.println("          symbol table");
			SymbolWriter.println("        name      address");
			for (String key : SymbolTable.keySet()) {
				SymbolWriter.printf("%12s      %06x\n", key,
						SymbolTable.get(key));
			}
			SymbolWriter.println();
		}
		SymbolWriter.close();
		writer.close();
	}

	public static boolean isExtended(String instruction) {
		if (instruction.charAt(0) == '+')
			return true;
		return false;
	}

	public static boolean checkDuplicate(String label) {
		if (SymbolTable.containsKey(label))
			return true;
		return false;
	}

	public static boolean checkOperands(String s) {
		StringTokenizer tokens = new StringTokenizer(s, ",");
		ArrayList<String> tkns = new ArrayList<String>();
		while (tokens.hasMoreElements())
			tkns.add(tokens.nextElement().toString());
		if (tkns.size() == 2)
			return true;
		else
			return false;
	}

	public static boolean checkOpcode(String s) {
		if (s.contains("RMO") || s.contains("ADDR") || s.contains("SUBR")
				|| s.contains("MULTR") || s.contains("DIVR")
				|| s.contains("COMPR"))
			return true;
		return false;
	}

	public static int CheckType(String line, ArrayList<String> s) {
		if (line.contains("START") || line.contains("END"))
			return 1;
		else if (line.contains("BYTE") || line.contains("WORD")
				|| line.contains("RESB") || line.contains("RESW"))
			return 2;
		else if (line.charAt(0) == '.')
			return 3;
		else {
			String s0 = s.get(0).substring(1);
			String s1 = s.get(1).substring(1);
			if (instructions.containsKey(s.get(0))
					|| instructions.containsKey(s0)
					|| instructions.containsKey(s.get(1))
					|| instructions.containsKey(s1))
				return 4;
			else
				return 0;
		}

	}
}
