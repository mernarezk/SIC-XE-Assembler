import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.StringTokenizer;

public class Pass2 {
	private static BufferedReader in;
	static Hashtable<String, Integer> Registers = new Hashtable<String, Integer>();
	static Hashtable<String, Integer> opcode = new Hashtable<String, Integer>();
	private static ArrayList<String> words;
	private static ArrayList<String> operands = new ArrayList<String>();
	static int objCode = 0b0000000000;
	static Pass1 pass1 = new Pass1();
	static int locctr = 0;
	static String key;
	static int subOp;
	static PrintWriter objfile;
	static String kk;

	public static void main(String args[]) throws IOException {
		pass1.main(args);
		// for (String k : pass1.SymbolTable.keySet()) {
		// System.out.println(k + " ");
		// }
		if (pass1.DuplicateLabel == true || pass1.WrongInstruction == true) {
			System.out.println("Error");
			return;
		} else {
			readOpcodeFile();
			AssiReg();
			objfile = new PrintWriter("OBJECTFILE.txt");
			PrintWriter modificationRec = new PrintWriter(new FileOutputStream(
					new File("LISFILE.txt"), true));
			in = new BufferedReader(new InputStreamReader(new FileInputStream(
					"srcfile.txt"), "UTF-8"));
			String line;
			boolean firstRec = false;
			// int ObjCodes[]=new int[pass1.l]
			while ((line = in.readLine()) != null) {

				words = new ArrayList<String>();
				words = split(line);

				int type;
				type = pass1.CheckType(line, words);
				
				objCode = 0b0000000000;
				switch (type) {
				case 1:
					Iterator it = pass1.SymbolTable.keySet().iterator();
					String k = it.next().toString();
					kk=k;
					if (k.contains("START"))
						locctr = pass1.SymbolTable.get(k);
					int size = pass1.SymbolTable.get("END") - locctr;
					int sizeLeft = size;
					
					if (!firstRec) {
						objfile.printf("H%s%06X%06X\n", k,
								pass1.SymbolTable.get(k), size);
						//objfile.printf("T");
						firstRec = true;
					}
					break;
				case 2:
					if(line.contains("BYTE")){
						String string=words.get(2).substring(2, words.get(2).length()-1);
						char ar[]=string.toCharArray();
						for(int i=0;i<ar.length;i++)
							//System.out.printf("%x",Integer.valueOf(ar[i]));
							objfile.printf("%x",Integer.valueOf(ar[i]));
						//System.out.println(string);
					}
					if(line.contains("WORD")){
						//System.out.println(Integer.parseInt(words.get(2)));
						objfile.printf("T03%06x\n",Integer.parseInt(words.get(2)));
					}
					break;
				case 3:
					break;
				case 4:
					if(checkLineLength(words)==1&&line.contains("RSUB")){
						locctr+=pass1.instructions.get("RSUB").get(0);
						objfile.printf("T03%s0000\n",opcode.get("RSUB"));
					}
					if (checkLineLength(words) == 2)
						NoLabel();

					if (checkLineLength(words) == 3)
						withLabel();
					break;
				}
			}
			//Iterator it = pass1.SymbolTable.keySet().iterator();
			//tring k = it.next().toString();
			//k=it.next().toString();
			objfile.println();
			objfile.printf("E%06x",pass1.SymbolTable.get(kk));
			objfile.close();

		}
	}

	public static void withLabel() {
		if (words.get(2).charAt(0) == '#')// immediate +1
		{

			if (pass1.isExtended(words.get(1))) {
				objCode = opcode.get(words.get(1).substring(1)) + 1;
				objCode <<= 4;// mtnseesh el extended wl b p e
				objCode += 1;
				objCode <<= 4 * 5;
				locctr += pass1.instructions.get(words.get(1).substring(1))
						.get(1);

			} else {
				objCode = opcode.get(words.get(1)) + 1;
				objCode <<= 16 * 2;// mtnseesh el extended wl b p e
				locctr += pass1.instructions.get(words.get(1)).get(0);
				objCode <<= 16;
			}

			key = words.get(2).substring(1);
			if (pass1.SymbolTable.containsKey(key))
				objCode += pass1.SymbolTable.get(key);
			else
				objCode += Integer.parseInt(words.get(2).substring(1));
			objfile.printf("T03%06x\n", objCode);

		} else if (words.get(2).charAt(0) == '@') {

			objCode = opcode.get(words.get(1)) + 2;
			objCode <<= 4;
			if (pass1.isExtended(words.get(1))) {
				locctr += pass1.instructions.get(
						words.get(1).substring(1).substring(1)).get(1);
				//System.out.println();
				objCode++;
			} else {
				locctr += pass1.instructions.get(words.get(1)).get(0);
				objCode += 2;
			}
			objCode <<= 4 * 4;
			objCode += (pass1.SymbolTable.get(words.get(2).substring(1)) - locctr);
			objfile.printf("T03%06x\n", objCode);
		} else {
			if (pass1.isExtended(words.get(1)))
				locctr += pass1.instructions.get(words.get(1).substring(1))
						.get(1);
			else
				locctr += pass1.instructions.get(words.get(1)).get(0);
			if (isRegOp(words.get(1))) {
				objCode += opcode.get(words.get(1));
				objCode <<= 4;
				operands = splitWithDel(words.get(2));
				int sizeeee = operands.size();
				if (operands.size() == 2) {
					objCode += Registers.get(operands.get(0));
					objCode <<= 4;
					objCode += Registers.get(operands.get(1));
					objfile.printf("T03%04x\n", objCode);
				}
			} else {
				operands = splitWithDel(words.get(2));
				if (pass1.isExtended(words.get(1))) {
					objCode = opcode.get(words.get(1).substring(1)) + 3;
					// locctr +=
					// pass1.instructions.get(words.get(1).substring(1))
					// .get(1);
				} else {
					objCode = opcode.get(words.get(1)) + 3;
					// System.out.println("line NO" + anafeen);
					// locctr += pass1.instructions.get(words.get(1)).get(0);
				}
				objCode <<= 4;
				if (operands.size() == 2) {
					objCode += 10;
					objCode <<= 4 * 3;
					objCode += pass1.SymbolTable.get(operands.get(0)) - locctr;
					objfile.printf("T03%06x\n", objCode);
				} else {
					objCode += 2;
					objCode <<= 4 * 3;
					objCode += pass1.SymbolTable.get(operands.get(0));
					objfile.printf("T03%06x\n", objCode);
				}
			}

		}
	}

	public static void NoLabel() {
		if (words.get(1).charAt(0) == '#')// immediate +1
		{

			if (pass1.isExtended(words.get(0))) {
				objCode = opcode.get(words.get(0).substring(1)) + 1;
				objCode <<= 4;// mtnseesh el extended wl b p e
				objCode += 1;
				objCode <<= 4 * 5;
				locctr += pass1.instructions.get(words.get(0).substring(1))
						.get(1);
				key = words.get(1).substring(1);
				if (pass1.SymbolTable.containsKey(key)) {
					String TA = Integer.toHexString(pass1.SymbolTable.get(words
							.get(1).substring(1)));
					objCode >>= 4 * 3;
					String objectCode = Integer.toHexString(objCode) + TA;
					System.out.println(objectCode);
					objfile.printf("T04%s\n", TA);
				} else {
					String TA = Integer.toHexString(Integer.parseInt(words.get(
							1).substring(1)));
					String objectCode = Integer.toHexString(objCode) + TA;
					objfile.printf("T04%s\n", objCode);
					System.out.println(objectCode);
					// ////////////////////
				}

			} else {
				objCode = opcode.get(words.get(0)) + 1;
				objCode <<= 16 * 2;// mtnseesh el extended wl b p e
				locctr += pass1.instructions.get(words.get(0)).get(0);
				objCode <<= 16;
				// // }

				key = words.get(1).substring(1);
				if (pass1.SymbolTable.containsKey(key))
					objCode += pass1.SymbolTable.get(key);
				else
					objCode += Integer.parseInt(words.get(1).substring(1));
				// System.out.printf("%06x", objCode);
				objfile.printf("T03%06x\n", objCode);
			}
		} else if (words.get(1).charAt(0) == '@') {

			objCode = opcode.get(words.get(0)) + 2;
			objCode <<= 4;
			if (pass1.isExtended(words.get(0))) {
				locctr += pass1.instructions.get(
						words.get(0).substring(1).substring(1)).get(1);
				objCode++;
			} else {
				locctr += pass1.instructions.get(words.get(0)).get(0);
				objCode += 2;
			}
			objCode <<= 4 * 4;
			objCode += (pass1.SymbolTable.get(words.get(1).substring(1)) - locctr);
			// System.out.printf("%06x\n", objCode);
			objfile.printf("T03%06x\n", objCode);
		} else {
			if (pass1.isExtended(words.get(0)))
				locctr += pass1.instructions.get(words.get(0).substring(1))
						.get(1);
			else
				locctr += pass1.instructions.get(words.get(0)).get(0);
			if (isRegOp(words.get(0))) {
				objCode += opcode.get(words.get(0));
				objCode <<= 4;
				operands = splitWithDel(words.get(1));
				int sizeeee = operands.size();
				if (operands.size() == 2) {
					objCode += Registers.get(operands.get(0));
					objCode <<= 4;
					objCode += Registers.get(operands.get(1));
					//System.out.printf("%04x\n", objCode);
					objfile.printf("T03%04x\n", objCode);
				}
			} else {
				operands = splitWithDel(words.get(1));
				if (pass1.isExtended(words.get(0))) {
					objCode = opcode.get(words.get(0).substring(1)) + 3;
					// locctr +=
					// pass1.instructions.get(words.get(0).substring(1))
					// .get(1);
				} else {
					objCode = opcode.get(words.get(0)) + 3;
					// locctr += pass1.instructions.get(words.get(0)).get(0);
				}
				objCode <<= 4;
				if (operands.size() == 2) {
					objCode += 10;
					objCode <<= 4 * 3;
					subOp = pass1.SymbolTable.get(operands.get(0)) - locctr;
					// System.out.println("subtraction: "+ subOp);
					objCode += subOp;
					//System.out.printf("%06x\n", objCode);
					objfile.printf("T03%06x\n", objCode);
				} else {
					objCode += 2;
					objCode <<= 4 * 3;
					subOp = pass1.SymbolTable.get(operands.get(0)) - locctr;
					// System.out.println("subtraction: aa "+ subOp);
					if (subOp < 0) {
						String hexa = Integer.toHexString(subOp);
						objCode >>= 3 * 4;
						String objectCode = Integer.toHexString(objCode);
						objectCode += hexa.substring(hexa.length() - 3);
						//System.out.printf("%s\n", objectCode);
						objfile.printf("T04%s\n", objectCode);
						objCode = Integer.parseInt(objectCode, 16);
					} else {
						objCode += subOp;
						objfile.printf("T03%06x\n", objCode);
						//System.out.printf("%08x\n", objCode);
					}
				}
			}

		}
	}

	// public static int twosComplement(){
	//
	// }
	public static int RecNu(int tot){
		return tot/0x1e;
	}
	public static ArrayList<String> splitWithDel(String s) {
		ArrayList<String> list = new ArrayList<String>();
		StringTokenizer tokens = new StringTokenizer(s, ",");
		while (tokens.hasMoreElements())
			list.add(tokens.nextElement().toString());
		return list;
	}

	public static boolean isRegOp(String s) {
		int index = s.length() - 1;
		int way2 = s.lastIndexOf(s);
		if (s.charAt(s.length() - 1) == 'R')
			return true;
		return false;
	}

	public static int checkLineLength(ArrayList<String> s) {
		return s.size();
	}

	public static ArrayList<String> split(String s) {
		ArrayList<String> list = new ArrayList<String>();
		StringTokenizer tokens = new StringTokenizer(s);
		while (tokens.hasMoreElements())
			list.add(tokens.nextElement().toString());
		return list;
	}

	public static void readOpcodeFile() throws IOException {
		in = new BufferedReader(new InputStreamReader(new FileInputStream(
				"opcode.txt"), "UTF-8"));
		String line;

		while ((line = in.readLine()) != null) {
			String words[] = new String[2];
			StringTokenizer tokens = new StringTokenizer(line);
			words[0] = tokens.nextElement().toString();
			words[1] = tokens.nextToken().toString();
			int opco = Integer.parseInt(words[1], 16);
			opcode.put(words[0], opco);
			// System.out.println(line);
		}

	}

	public static void AssiReg() {
		Registers.put("A", 0);
		Registers.put("X", 1);
		Registers.put("L", 2);
		Registers.put("B", 3);
		Registers.put("S", 4);
		Registers.put("T", 5);
	}
}
